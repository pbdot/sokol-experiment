#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input /Users/tomhultonharrop/Documents/Projects/sokol-experiment/shader/projected.glsl --output projected.h --slang glsl330:hlsl5

    Overview:

        Shader program 'projected':
            Get shader desc: projected_shader_desc(sg_query_backend());
            Vertex shader: projected_vs
                Attribute slots:
                    ATTR_projected_vs_position = 0
                    ATTR_projected_vs_uv0 = 1
                    ATTR_projected_vs_depth_recip0 = 2
                Uniform block 'ProjectedUniforms':
                    C struct: ProjectedUniforms_t
                    Bind slot: SLOT_ProjectedUniforms = 0
            Fragment shader: projected_fs
                Image 'the_texture':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_the_texture = 0


    Shader descriptor structs:

        sg_shader projected = sg_make_shader(projected_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'projected_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_projected_vs_position] = { ... },
                    [ATTR_projected_vs_uv0] = { ... },
                    [ATTR_projected_vs_depth_recip0] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_the_texture = 0;

    Bind slot and C-struct for uniform block 'ProjectedUniforms':

        ProjectedUniforms_t ProjectedUniforms = {
            .mvp = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_ProjectedUniforms, &SG_RANGE(ProjectedUniforms));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_projected_vs_position (0)
#define ATTR_projected_vs_uv0 (1)
#define ATTR_projected_vs_depth_recip0 (2)
#define SLOT_the_texture (0)
#define SLOT_ProjectedUniforms (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct ProjectedUniforms_t {
    float mvp[16];
} ProjectedUniforms_t;
#pragma pack(pop)
/*
    #version 330
    
    uniform vec4 ProjectedUniforms[4];
    layout(location = 0) in vec4 position;
    out vec2 uv;
    layout(location = 1) in vec2 uv0;
    layout(location = 2) in float depth_recip0;
    out float depth_recip;
    
    void main()
    {
        gl_Position = mat4(ProjectedUniforms[0], ProjectedUniforms[1], ProjectedUniforms[2], ProjectedUniforms[3]) * position;
        uv = uv0 * depth_recip0;
        depth_recip = depth_recip0;
    }
    
*/
static const char projected_vs_source_glsl330[405] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x50,0x72,0x6f,0x6a,0x65,
    0x63,0x74,0x65,0x64,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x34,0x5d,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,
    0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x32,0x20,0x75,0x76,0x30,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x72,0x65,0x63,0x69,0x70,
    0x30,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x64,0x65,0x70,
    0x74,0x68,0x5f,0x72,0x65,0x63,0x69,0x70,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,
    0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x65,0x64,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x73,0x5b,0x30,0x5d,0x2c,0x20,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x65,0x64,0x55,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x50,0x72,0x6f,0x6a,
    0x65,0x63,0x74,0x65,0x64,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x32,0x5d,
    0x2c,0x20,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x65,0x64,0x55,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x75,0x76,0x30,
    0x20,0x2a,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x72,0x65,0x63,0x69,0x70,0x30,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x72,0x65,0x63,0x69,0x70,
    0x20,0x3d,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x72,0x65,0x63,0x69,0x70,0x30,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform sampler2D the_texture;
    
    layout(location = 0) out vec4 frag_color;
    in vec2 uv;
    in float depth_recip;
    
    void main()
    {
        frag_color = texture(the_texture, uv / vec2(depth_recip));
    }
    
*/
static const char projected_fs_source_glsl330[204] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x74,0x68,0x65,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x3b,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,
    0x75,0x76,0x3b,0x0a,0x69,0x6e,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x64,0x65,0x70,
    0x74,0x68,0x5f,0x72,0x65,0x63,0x69,0x70,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x28,0x74,0x68,0x65,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2c,0x20,0x75,
    0x76,0x20,0x2f,0x20,0x76,0x65,0x63,0x32,0x28,0x64,0x65,0x70,0x74,0x68,0x5f,0x72,
    0x65,0x63,0x69,0x70,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    cbuffer ProjectedUniforms : register(b0)
    {
        row_major float4x4 _21_mvp : packoffset(c0);
    };
    
    
    static float4 gl_Position;
    static float4 position;
    static float2 uv;
    static float2 uv0;
    static float depth_recip0;
    static float depth_recip;
    
    struct SPIRV_Cross_Input
    {
        float4 position : TEXCOORD0;
        float2 uv0 : TEXCOORD1;
        float depth_recip0 : TEXCOORD2;
    };
    
    struct SPIRV_Cross_Output
    {
        float2 uv : TEXCOORD0;
        float depth_recip : TEXCOORD1;
        float4 gl_Position : SV_Position;
    };
    
    #line 15 "/Users/tomhultonharrop/Documents/Projects/sokol-experiment/shader/projected.glsl"
    void vert_main()
    {
    #line 15 "/Users/tomhultonharrop/Documents/Projects/sokol-experiment/shader/projected.glsl"
        gl_Position = mul(position, _21_mvp);
    #line 16 "/Users/tomhultonharrop/Documents/Projects/sokol-experiment/shader/projected.glsl"
        uv = uv0 * depth_recip0;
    #line 17 "/Users/tomhultonharrop/Documents/Projects/sokol-experiment/shader/projected.glsl"
        depth_recip = depth_recip0;
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        position = stage_input.position;
        uv0 = stage_input.uv0;
        depth_recip0 = stage_input.depth_recip0;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.uv = uv;
        stage_output.depth_recip = depth_recip;
        return stage_output;
    }
*/
static const char projected_vs_source_hlsl5[1354] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x65,
    0x64,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,
    0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x6f,0x77,0x5f,0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,
    0x34,0x20,0x5f,0x32,0x31,0x5f,0x6d,0x76,0x70,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,
    0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x75,0x76,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x75,0x76,0x30,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x72,0x65,0x63,0x69,
    0x70,0x30,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x72,0x65,0x63,0x69,0x70,0x3b,0x0a,0x0a,0x73,
    0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,
    0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,
    0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x30,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,
    0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x72,0x65,0x63,0x69,0x70,0x30,0x20,0x3a,0x20,
    0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x32,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,
    0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,
    0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,
    0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x64,0x65,0x70,0x74,0x68,0x5f,0x72,0x65,0x63,0x69,0x70,0x20,0x3a,0x20,0x54,0x45,
    0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3a,0x20,0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x35,0x20,0x22,0x2f,0x55,0x73,
    0x65,0x72,0x73,0x2f,0x74,0x6f,0x6d,0x68,0x75,0x6c,0x74,0x6f,0x6e,0x68,0x61,0x72,
    0x72,0x6f,0x70,0x2f,0x44,0x6f,0x63,0x75,0x6d,0x65,0x6e,0x74,0x73,0x2f,0x50,0x72,
    0x6f,0x6a,0x65,0x63,0x74,0x73,0x2f,0x73,0x6f,0x6b,0x6f,0x6c,0x2d,0x65,0x78,0x70,
    0x65,0x72,0x69,0x6d,0x65,0x6e,0x74,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x2f,0x70,
    0x72,0x6f,0x6a,0x65,0x63,0x74,0x65,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x76,
    0x6f,0x69,0x64,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,
    0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x35,0x20,0x22,0x2f,0x55,0x73,0x65,
    0x72,0x73,0x2f,0x74,0x6f,0x6d,0x68,0x75,0x6c,0x74,0x6f,0x6e,0x68,0x61,0x72,0x72,
    0x6f,0x70,0x2f,0x44,0x6f,0x63,0x75,0x6d,0x65,0x6e,0x74,0x73,0x2f,0x50,0x72,0x6f,
    0x6a,0x65,0x63,0x74,0x73,0x2f,0x73,0x6f,0x6b,0x6f,0x6c,0x2d,0x65,0x78,0x70,0x65,
    0x72,0x69,0x6d,0x65,0x6e,0x74,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x2f,0x70,0x72,
    0x6f,0x6a,0x65,0x63,0x74,0x65,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,
    0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x6d,0x75,0x6c,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x5f,0x32,
    0x31,0x5f,0x6d,0x76,0x70,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x36,
    0x20,0x22,0x2f,0x55,0x73,0x65,0x72,0x73,0x2f,0x74,0x6f,0x6d,0x68,0x75,0x6c,0x74,
    0x6f,0x6e,0x68,0x61,0x72,0x72,0x6f,0x70,0x2f,0x44,0x6f,0x63,0x75,0x6d,0x65,0x6e,
    0x74,0x73,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,0x2f,0x73,0x6f,0x6b,0x6f,
    0x6c,0x2d,0x65,0x78,0x70,0x65,0x72,0x69,0x6d,0x65,0x6e,0x74,0x2f,0x73,0x68,0x61,
    0x64,0x65,0x72,0x2f,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x65,0x64,0x2e,0x67,0x6c,
    0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x75,0x76,0x30,
    0x20,0x2a,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x72,0x65,0x63,0x69,0x70,0x30,0x3b,
    0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x37,0x20,0x22,0x2f,0x55,0x73,0x65,0x72,
    0x73,0x2f,0x74,0x6f,0x6d,0x68,0x75,0x6c,0x74,0x6f,0x6e,0x68,0x61,0x72,0x72,0x6f,
    0x70,0x2f,0x44,0x6f,0x63,0x75,0x6d,0x65,0x6e,0x74,0x73,0x2f,0x50,0x72,0x6f,0x6a,
    0x65,0x63,0x74,0x73,0x2f,0x73,0x6f,0x6b,0x6f,0x6c,0x2d,0x65,0x78,0x70,0x65,0x72,
    0x69,0x6d,0x65,0x6e,0x74,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x2f,0x70,0x72,0x6f,
    0x6a,0x65,0x63,0x74,0x65,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x72,0x65,0x63,0x69,0x70,0x20,0x3d,0x20,0x64,
    0x65,0x70,0x74,0x68,0x5f,0x72,0x65,0x63,0x69,0x70,0x30,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,
    0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x70,0x75,0x74,0x2e,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x75,0x76,0x30,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x70,0x75,0x74,0x2e,0x75,0x76,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x64,0x65,0x70,
    0x74,0x68,0x5f,0x72,0x65,0x63,0x69,0x70,0x30,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x64,0x65,0x70,0x74,0x68,0x5f,0x72,0x65,
    0x63,0x69,0x70,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,
    0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x75,0x76,0x20,0x3d,0x20,0x75,0x76,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,
    0x75,0x74,0x2e,0x64,0x65,0x70,0x74,0x68,0x5f,0x72,0x65,0x63,0x69,0x70,0x20,0x3d,
    0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x72,0x65,0x63,0x69,0x70,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,
    0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
/*
    Texture2D<float4> the_texture : register(t0);
    SamplerState _the_texture_sampler : register(s0);
    
    static float4 frag_color;
    static float2 uv;
    static float depth_recip;
    
    struct SPIRV_Cross_Input
    {
        float2 uv : TEXCOORD0;
        float depth_recip : TEXCOORD1;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 frag_color : SV_Target0;
    };
    
    #line 11 "/Users/tomhultonharrop/Documents/Projects/sokol-experiment/shader/projected.glsl"
    void frag_main()
    {
    #line 11 "/Users/tomhultonharrop/Documents/Projects/sokol-experiment/shader/projected.glsl"
        frag_color = the_texture.Sample(_the_texture_sampler, uv / depth_recip.xx);
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        uv = stage_input.uv;
        depth_recip = stage_input.depth_recip;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.frag_color = frag_color;
        return stage_output;
    }
*/
static const char projected_fs_source_hlsl5[864] = {
    0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x3e,0x20,0x74,0x68,0x65,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x20,0x3a,0x20,
    0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x30,0x29,0x3b,0x0a,0x53,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x5f,0x74,0x68,0x65,0x5f,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,
    0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x30,0x29,0x3b,0x0a,
    0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x3b,0x0a,0x73,0x74,0x61,
    0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,
    0x72,0x65,0x63,0x69,0x70,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,
    0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x72,0x65,
    0x63,0x69,0x70,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,
    0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,
    0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,
    0x31,0x20,0x22,0x2f,0x55,0x73,0x65,0x72,0x73,0x2f,0x74,0x6f,0x6d,0x68,0x75,0x6c,
    0x74,0x6f,0x6e,0x68,0x61,0x72,0x72,0x6f,0x70,0x2f,0x44,0x6f,0x63,0x75,0x6d,0x65,
    0x6e,0x74,0x73,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,0x2f,0x73,0x6f,0x6b,
    0x6f,0x6c,0x2d,0x65,0x78,0x70,0x65,0x72,0x69,0x6d,0x65,0x6e,0x74,0x2f,0x73,0x68,
    0x61,0x64,0x65,0x72,0x2f,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x65,0x64,0x2e,0x67,
    0x6c,0x73,0x6c,0x22,0x0a,0x76,0x6f,0x69,0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x31,
    0x20,0x22,0x2f,0x55,0x73,0x65,0x72,0x73,0x2f,0x74,0x6f,0x6d,0x68,0x75,0x6c,0x74,
    0x6f,0x6e,0x68,0x61,0x72,0x72,0x6f,0x70,0x2f,0x44,0x6f,0x63,0x75,0x6d,0x65,0x6e,
    0x74,0x73,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,0x2f,0x73,0x6f,0x6b,0x6f,
    0x6c,0x2d,0x65,0x78,0x70,0x65,0x72,0x69,0x6d,0x65,0x6e,0x74,0x2f,0x73,0x68,0x61,
    0x64,0x65,0x72,0x2f,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x65,0x64,0x2e,0x67,0x6c,
    0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x74,0x68,0x65,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x74,0x68,0x65,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x75,0x76,
    0x20,0x2f,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x72,0x65,0x63,0x69,0x70,0x2e,0x78,
    0x78,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,
    0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,
    0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x70,0x75,0x74,0x2e,0x75,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,0x64,0x65,0x70,
    0x74,0x68,0x5f,0x72,0x65,0x63,0x69,0x70,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x64,0x65,0x70,0x74,0x68,0x5f,0x72,0x65,0x63,
    0x69,0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,
    0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,

};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before projected.h"
#endif
static inline const sg_shader_desc* projected_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.attrs[1].name = "uv0";
      desc.attrs[2].name = "depth_recip0";
      desc.vs.source = projected_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "ProjectedUniforms";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = projected_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "the_texture";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "projected_shader";
    }
    return &desc;
  }
  if (backend == SG_BACKEND_D3D11) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].sem_name = "TEXCOORD";
      desc.attrs[0].sem_index = 0;
      desc.attrs[1].sem_name = "TEXCOORD";
      desc.attrs[1].sem_index = 1;
      desc.attrs[2].sem_name = "TEXCOORD";
      desc.attrs[2].sem_index = 2;
      desc.vs.source = projected_vs_source_hlsl5;
      desc.vs.d3d11_target = "vs_5_0";
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.source = projected_fs_source_hlsl5;
      desc.fs.d3d11_target = "ps_5_0";
      desc.fs.entry = "main";
      desc.fs.images[0].name = "the_texture";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "projected_shader";
    }
    return &desc;
  }
  return 0;
}
